name: Release

on:
  push:
    tags:
      - 'v*' # Trigger on version tags
  workflow_dispatch: # Allow manual triggering
    inputs:
      version:
        description: 'Version to release (e.g. v1.0.0)'
        required: true
        type: string
      create_tag:
        description: 'Create a new tag for this version'
        required: false
        type: boolean
        default: false
      prerelease:
        description: 'Mark this release as a pre-release'
        required: false
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.os }} (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: audio-metadata-linux-x86_64
            arch: x86_64
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
            artifact_name: audio-metadata-linux-aarch64
            arch: aarch64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: audio-metadata-macos-x86_64
            arch: x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: audio-metadata-macos-aarch64
            arch: aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: audio-metadata-windows-x86_64.exe
            arch: x86_64

    steps:
      - uses: actions/checkout@v4

      - name: Create tag if requested
        if: github.event_name == 'workflow_dispatch' && inputs.create_tag
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag ${{ inputs.version }}
          git push origin ${{ inputs.version }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create release directory
        run: mkdir release

      - name: Copy binary to release directory
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/audio-metadata.exe release/${{ matrix.artifact_name }}
          else
            cp target/${{ matrix.target }}/release/audio-metadata release/${{ matrix.artifact_name }}
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: release/${{ matrix.artifact_name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: List artifacts
        run: ls -R artifacts/

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name }}
          files: artifacts/audio-metadata-linux*
          generate_release_notes: true
          prerelease: ${{ github.event_name == 'workflow_dispatch' && inputs.prerelease || false }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 